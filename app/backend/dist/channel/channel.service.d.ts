import { channelDto } from './dto/channelDto';
import { Channel } from 'src/databases/channel.entity';
import { Repository } from 'typeorm';
import { UserOperationDto } from './dto/operateUserDto';
import { JwtService } from '@nestjs/jwt';
import { Message } from 'src/databases/message.entity';
import { UserService } from 'src/user/user.service';
import { Muted_users } from 'src/databases/muted_users.entity';
import { channelMessageDto } from './dto/channelMessageDto';
import { protectedChannelDto } from './dto/protectedChannelDto';
export declare class ChannelService {
    private channelRepo;
    private messageRepo;
    private muteRepo;
    private readonly jwtService;
    private readonly userService;
    constructor(channelRepo: Repository<Channel>, messageRepo: Repository<Message>, muteRepo: Repository<Muted_users>, jwtService: JwtService, userService: UserService);
    findChannelWithMembers(channelName: string): Promise<Channel>;
    findChannelBannedMembers(channelName: string): Promise<Channel>;
    channelCreate(channelData: channelDto): Promise<"channel name must be set" | "channel name is too large" | "channel type must be set" | "password must be set" | "channel password is too large" | "channel already created">;
    channelUpdate(channelData: channelDto): Promise<"channel name must be set" | "channel name is too large" | "channel type must be set" | "password must be set" | "channel password is too large">;
    getLatestMessages(channelId: number, userId: number): Promise<Message[]>;
    kickUserFromChannel(kickUser: UserOperationDto): Promise<void>;
    banUserFromChannel(banUser: UserOperationDto): Promise<void>;
    promoteMember(userId: number, channelId: number): Promise<string>;
    storeChannelMessage(messageData: channelMessageDto, channel: Channel): Promise<void>;
    muteUserFromChannel(muteUser: UserOperationDto, channel: Channel): Promise<string>;
    unmuteUser(userId: number): Promise<void>;
    getChannel(channelName: string): Promise<Channel>;
    getPublicChannels(): Promise<Channel[]>;
    getProtectedChannels(): Promise<Channel[]>;
    getPrivateChannels(): Promise<Channel[]>;
    userIsBanned(channelName: string, userId: number): Promise<boolean>;
    userIsMuted(userId: number): Promise<boolean>;
    leaveChannel(channelName: string, userId: number): Promise<void>;
    getChannelData(id: number): Promise<Channel>;
    getChannelName(channelId: number): Promise<string>;
    getUserGrade(userId: number, channelId: number): Promise<"owner" | "admin" | "user">;
    getAllChannels(id: number): Promise<Channel[]>;
    getAccessibleChannels(): Promise<Channel[]>;
    checkProtectedChannel(channelData: protectedChannelDto, userId: any): Promise<boolean | "You are already a member">;
    addUserToChannel(userId: number, channelName: string): Promise<string>;
}
